{"version":3,"sources":["helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFecthGifs.js","components/AddCategory.js","GifExpertApp.js","index.js"],"names":["getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","useState","loading","state","setState","useEffect","then","imgs","useFetchGifs","AddCategory","setCategories","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2NAEaA,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,gEAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAeZM,GAfY,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAEjC,OACI,sBAAKc,UAAY,yCAAjB,UACI,qBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAc,MAIdoB,mBAAS,CAC/Bb,KAAM,GACNc,SAAS,IAN2B,mBAIjCC,EAJiC,KAI1BC,EAJ0B,KAqBxC,OAZAC,qBAAW,WACHzB,EAASC,GACRyB,MAAO,SAAAC,GAEJH,EAAS,CACLhB,KAAKmB,EACLL,SAAS,SAGlB,CAAErB,IAGFsB,EDnByBK,CAAc3B,GAAjCa,EAFwB,EAE9BN,KAAcc,EAFgB,EAEhBA,QAErB,OAEI,qCACI,qBAAKL,UAAY,6CAAjB,cAAiEhB,EAAjE,OAEEqB,GAAY,mBAAGL,UAAU,wCAAb,qBAEd,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,a,OEjBzBiB,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZT,mBAAS,IAFG,mBAEzCU,EAFyC,KAE7BC,EAF6B,KAoBhD,OAEI,sBAAMC,SAdW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BP,GAAe,SAAAQ,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MASlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAtBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,aCHnBG,EAAe,WAAM,MAGMtB,mBAAS,CAAC,cAHhB,mBAGvBuB,EAHuB,KAGXd,EAHW,KAc9B,OACI,qCACE,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEQc,EAAWlC,KAAK,SAAAT,GAAQ,OAItB,aAHE,CAGD,EAAD,CAEIA,SAAWA,GADLA,Y,MC3B9B4C,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.82d42abe.chunk.js","sourcesContent":["\n\nexport const getGifs = async( category ) =>{\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI (category) } &limit=10&api_key=0igbSu7UoeYI0GrbykqVwNndRlspJsEh`;\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n\n        }\n    } )\n\n    return(gifs);\n\n}","import React from 'react'\n\nexport const GifGridItem = ( {title, url } ) => {\n    \n    return (\n        <div className = \"card animate__animated animate__fadeIn\" >\n            <img src={url} alt={ title} />\n            <p> { title } </p>\n            {/* {img.title} */}\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFecthGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( {category} ) => {\n    \n    const {data: images, loading} = useFetchGifs( category);\n\n    return (\n\n        <>\n            <h3  className = \"card animate__animated animate__fadeInDown\"> { category } </h3>\n\n            { loading  && <p className=\"card animate__animated animate__flash\">Loading</p>}\n\n            <div className=\"card-grid\">\n\n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key={ img.id }\n                            { ...img }\n                        />     \n                    ))\n                }\n\n            </div>    \n\n\n            {/* codigo usado para mostrar imagenes \n            \n            <ol>\n                {\n                    images.map( ({id, title}) => (\n                        <li key = {id}> {title}</li>\n                    ))\n                }\n            </ol> */}\n\n            {/* codigo usado para useEffect \n            <h3> { count } </h3>\n            <button onClick={ () => setCount( count + 1 )}></button> */}    \n        </>\n    )\n\n    \n}\n\n\n","import { useEffect, useState } from \"react\"\nimport {getGifs} from '../helpers/getGifs'\n\n//este codigo sirve para realizar una carga automÃ¡tica\nexport const useFetchGifs = ( category ) => {\n\n    //cuando se usa por primera vez el FecthGifs se iplementa \n    //este estado que carga por defecto                                                                                                                                                                                                                                                           \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n            getGifs( category )\n            .then ( imgs => {\n\n                setState({\n                    data:imgs,\n                    loading: false\n                });\n            })\n        }, [ category ]) //si dejo vacio el segundo parametro, que debe ser un array,\n        //esto hace que solo se renderice una vez, si lo lleno se renderiza \n\n    return state; //data: [], loading: true\n\n}","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue (e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2){\n            setCategories( cats => [ inputValue, ...cats]);\n            setInputValue('');\n        }\n\n        //console.log('Submit hecho')\n    }\n    \n\n    return (\n        \n        <form onSubmit = {handleSubmit}>\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />  \n        </form>\n            \n    )\n}\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}","import React, { useState } from 'react'\nimport { GifGrid } from './components/GifGrid';\nimport { AddCategory } from './components/AddCategory';\n\n\nexport const GifExpertApp = () => {\n\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd =()=>{\n    //     //ejemplos para agregar un elemento\n    //     //setCategories( cats => [ ...cats, 'HunterXHunter']);\n    //     setCategories ( [...categories, 'HunterXHunter']);\n\n\n    // }\n\n\n    return (\n        <>\n          <h2> GifExpertApp </h2>\n          <AddCategory setCategories={ setCategories} />  \n          <hr />  \n        \n          \n          <ol>\n              { \n                  categories.map( category => (\n                      //se debe declarar el key de los array que no sea n index\n                      //return <li key={ category}> {category} </li>\n\n                    <GifGrid\n                        key={ category }\n                        category={ category } \n                    />\n                  ))\n               }\n          </ol>\n        </>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}